{"version":3,"sources":["reducers/user.js","actions/actionTypes.js","reducers/wallet.js","reducers/index.js","store/index.js","actions/index.js","pages/Login.js","components/Header.js","components/FormExpense.js","components/Table.js","pages/Wallet.js","App.js","serviceWorker.js","index.js"],"names":["INITIAL_STATE","email","user","state","action","type","currencies","expenses","removed","editExpense","expenseSelected","wallet","expense","map","e","id","expensesAtt","listAtt","bool","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","requestCurrencies","dispatch","fetch","then","response","json","data","Object","keys","filter","coins","getCurrency","catch","Login","handleChange","target","setState","name","value","handleClick","props","savingEmail","history","push","validate","pass","test","length","className","htmlFor","data-testid","onChange","this","disabled","onClick","React","Component","connect","Header","reduce","acc","exchangeRates","currency","ask","toFixed","undefined","totalExpenses","FormExpense","savingExpense","btnEditExpense","savingExpensesEdit","prev","description","method","tag","att","editExpenseBool","coin","key","saveExpense","objectCurrencies","Table","removeExpense","removedExpense","listExpensesAtt","attExpense","getExpense","split","transform","list","Wallet","getExpenseSelected","initialRequest","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.a91e6522.chunk.js","sourcesContent":["import { SAVE_EMAIL } from '../actions/actionTypes';\n\n// Esse reducer será responsável por tratar as informações da pessoa usuária\nconst INITIAL_STATE = {\n  email: '',\n};\n\nconst user = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SAVE_EMAIL:\n    return {\n      email: action.email,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","export const SAVE_EMAIL = 'SAVE_EMAIL';\nexport const SAVE_EXPENSE = 'SAVE_EXPENSE';\n\nexport const SELECTED_EXPENSE = 'SELECTED_EXPENSE';\n\nexport const ATT_EXPENSES = 'ATT_EXPENSES';\nexport const EDIT_EXPENSE = 'EDIT_EXPENSE';\nexport const REMOVE_EXPENSE = 'REMOVE_EXPENSE';\n\nexport const REQUEST_REALIZED = 'REQUEST_REALIZED';\nexport const REQUEST_FAILURE = 'REQUEST_FAILURE';\nexport const GET_CURRENCY = 'GET_CURRENCY';\n","import {\n  GET_CURRENCY,\n  ATT_EXPENSES,\n  SAVE_EXPENSE,\n  REMOVE_EXPENSE,\n  EDIT_EXPENSE,\n  SELECTED_EXPENSE,\n} from '../actions/actionTypes';\n\n// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  removed: [],\n  editExpense: false,\n  expenseSelected: [],\n};\n\nconst wallet = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case GET_CURRENCY:\n    return {\n      ...state,\n      currencies: [...action.currencies],\n    };\n  case SAVE_EXPENSE:\n    return {\n      ...state,\n      expenses: [...state.expenses, action.expense],\n    };\n  case ATT_EXPENSES:\n    return {\n      ...state,\n      // expenses: [...state.expenses, action.expensesAtt],\n      expenses: state.expenses.map((e) => {\n        if (e.id === action.expensesAtt.id) return action.expensesAtt;\n        return state.expenses;\n      }),\n    };\n  case REMOVE_EXPENSE:\n    return {\n      ...state,\n      removed: action.expense,\n      expenses: action.listAtt,\n    };\n  case EDIT_EXPENSE:\n    return {\n      ...state,\n      editExpense: action.bool,\n    };\n  case SELECTED_EXPENSE:\n    return {\n      ...state,\n      expenseSelected: action.expense,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\nimport { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({\n  user,\n  wallet,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","// Coloque aqui suas actions\nimport {\n  GET_CURRENCY,\n  ATT_EXPENSES,\n  REQUEST_FAILURE,\n  REQUEST_REALIZED,\n  SAVE_EMAIL,\n  SAVE_EXPENSE,\n  REMOVE_EXPENSE,\n  EDIT_EXPENSE,\n  SELECTED_EXPENSE,\n} from './actionTypes';\n\nconst requestRealized = () => ({ type: REQUEST_REALIZED });\nconst requestFailure = () => ({ type: REQUEST_FAILURE });\n\nexport const saveEmail = (email) => ({\n  type: SAVE_EMAIL,\n  email,\n});\n\nexport const saveExpense = (state) => ({\n  type: SAVE_EXPENSE,\n  expense: state,\n});\n\nexport const attExpenses = (expensesAtt) => ({\n  type: ATT_EXPENSES,\n  expensesAtt,\n});\n\nexport const editExpense = (bool) => ({\n  type: EDIT_EXPENSE,\n  bool,\n});\n\nexport const selectExpense = (expense) => ({\n  type: SELECTED_EXPENSE,\n  expense,\n});\n\nexport const removeExpense = (expense, listAtt) => ({\n  type: REMOVE_EXPENSE,\n  expense,\n  listAtt,\n});\n\nexport const getCurrency = (data) => ({\n  type: GET_CURRENCY,\n  currencies: Object.keys(data).filter((coins) => coins !== 'USDT'),\n});\n\nexport function requestCurrencies() {\n  return (dispatch) => {\n    dispatch(requestRealized());\n    return fetch('https://economia.awesomeapi.com.br/json/all')\n      .then((response) => response.json())\n      .then((data) => dispatch(getCurrency(data)))\n      .catch(() => dispatch(requestFailure()));\n  };\n}\n\nexport function objectCurrencies(state) {\n  return (dispatch) => {\n    dispatch(requestRealized());\n    return fetch('https://economia.awesomeapi.com.br/json/all')\n      .then((response) => response.json())\n      .then((data) => dispatch(saveExpense({ ...state, exchangeRates: data })))\n      .catch(() => dispatch(requestFailure()));\n  };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { saveEmail } from '../actions';\nimport '../css/login.css';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      email: '',\n      pass: '',\n    };\n  }\n\n  handleChange = ({ target }) => {\n    this.setState({\n      [target.name]: target.value,\n    });\n  };\n\n  handleClick = () => {\n    const { email } = this.state;\n    const { savingEmail, history } = this.props;\n\n    savingEmail(email);\n    history.push('/carteira');\n  };\n\n  validate = () => {\n    const { email, pass } = this.state;\n    const regex = /\\S+@\\S+\\.com/;\n    const limitPassword = 6;\n\n    if (!regex.test(email) || pass.length < limitPassword) {\n      return true;\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"login\">\n        <div className=\"login-box\">\n          <h1> Login </h1>\n          <label htmlFor=\"email-input\" className=\"login-label\">\n            Email\n            <input\n              type=\"email\"\n              name=\"email\"\n              data-testid=\"email-input\"\n              onChange={ this.handleChange }\n              className=\"login-input\"\n            />\n          </label>\n          <label htmlFor=\"password-input\" className=\"login-label\">\n            Senha\n            <input\n              type=\"password\"\n              name=\"pass\"\n              data-testid=\"password-input\"\n              onChange={ this.handleChange }\n              className=\"login-input\"\n            />\n          </label>\n\n          <button\n            type=\"submit\"\n            disabled={ this.validate() }\n            onClick={ this.handleClick }\n            className=\"login-button\"\n          >\n            Entrar\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = ({\n  savingEmail: PropTypes.func,\n  history: PropTypes.objectOf(PropTypes.number),\n}).isRequired;\n\nconst mapDispatchToProps = (dispatch) => ({\n  savingEmail: (state) => dispatch(saveEmail(state)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n\n/**\n * REF:\n * https://www.w3schools.com/jsref/jsref_regexp_test.asp\n * https://gist.github.com/alexandreservian/124db2fab8a75474dd6fdc4f17f93a5d\n */\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport '../css/header.css';\n\nclass Header extends React.Component {\n  totalExpenses(expenses) {\n    const total = expenses.reduce((acc, expense) => {\n      const subTotal = +expense.value * +expense.exchangeRates[expense.currency].ask;\n      acc += subTotal;\n      return +acc;\n    }, 0);\n\n    return total.toFixed(2);\n  }\n\n  render() {\n    const { email, expenses } = this.props;\n\n    return (\n      <header className=\"header\">\n        <div className=\"header-email\" data-testid=\"email-field\">\n          { email.length === 0 ? 'teste@teste.com' : email }\n        </div>\n        <div className=\"header-totalExpense\">\n          <p>Despesa total: </p>\n          <span>\n            R$\n            <p data-testid=\"total-field\">\n              {\n                (expenses === undefined || expenses.length === 0)\n                  ? 0\n                  : this.totalExpenses(expenses)\n              }\n            </p>\n          </span>\n          <p data-testid=\"header-currency-field\">BRL</p>\n        </div>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = ({\n  email: PropTypes.string,\n  expenses: PropTypes.arrayOf(PropTypes.object),\n}.isRequired);\n\nconst mapStateToProps = (store) => ({\n  email: store.user.email,\n  expenses: store.wallet.expenses,\n});\n\nexport default connect(mapStateToProps, null)(Header);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { objectCurrencies, editExpense, attExpenses } from '../actions';\nimport '../css/formExpense.css';\n\nclass FormExpense extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      value: 0,\n      description: 'teste',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      id: 0,\n    };\n  }\n\n  handleChange = ({ target }) => {\n    this.setState({\n      [target.name]: target.value,\n    });\n  };\n\n  handleClick = ({ target }) => {\n    const { name } = target;\n    const {\n      savingExpense,\n      btnEditExpense,\n      state,\n      savingExpensesEdit } = this.props;\n\n    if (name === 'add') {\n      savingExpense({ ...this.state });\n\n      this.setState((prev) => ({\n        value: 0,\n        description: '',\n        id: prev.id + 1,\n      }));\n    }\n    if (name === 'edit') {\n      const { value, description, method, tag } = this.state;\n\n      const att = ({ ...state, value, description, tag, method });\n      btnEditExpense(false);\n      savingExpensesEdit(att);\n    }\n  };\n\n  render() {\n    const { value, description, method, tag, currency } = this.state;\n    const { currencies, editExpenseBool } = this.props;\n\n    return (\n      <div>\n        <form>\n          <label htmlFor=\"value-input\">\n            Valor da despesa\n            <input\n              type=\"number\"\n              data-testid=\"value-input\"\n              name=\"value\"\n              value={ value }\n              onChange={ this.handleChange }\n            />\n          </label>\n          <label htmlFor=\"description-input\">\n            Descrição da despesa\n            <input\n              type=\"text\"\n              data-testid=\"description-input\"\n              name=\"description\"\n              value={ description }\n              onChange={ this.handleChange }\n            />\n          </label>\n          <label htmlFor=\"moeda\">\n            Moeda\n            <select\n              id=\"moeda\"\n              name=\"currency\"\n              data-testid=\"currency-input\"\n              onChange={ this.handleChange }\n              value={ currency }\n            >\n              {\n                currencies.map((coin) => (\n                  <option key={ coin }>{ coin }</option>\n                ))\n              }\n            </select>\n          </label>\n          <label htmlFor=\"method-input\">\n            Método de pagamento\n            <select\n              id=\"method-input\"\n              data-testid=\"method-input\"\n              name=\"method\"\n              value={ method }\n              onChange={ this.handleChange }\n            >\n              <option value=\"Dinheiro\">Dinheiro</option>\n              <option value=\"Cartão de crédito\">Cartão de crédito</option>\n              <option value=\"Cartão de débito\">Cartão de débito</option>\n            </select>\n          </label>\n          <label htmlFor=\"tag-input\">\n            Categoria\n            <select\n              id=\"tag-input\"\n              data-testid=\"tag-input\"\n              name=\"tag\"\n              onChange={ this.handleChange }\n              value={ tag }\n            >\n              <option value=\"Alimentação\">Alimentação</option>\n              <option value=\"Lazer\">Lazer</option>\n              <option value=\"Trabalho\">Trabalho</option>\n              <option value=\"Transporte\">Transporte</option>\n              <option value=\"Saúde\">Saúde</option>\n            </select>\n          </label>\n\n          <button\n            type=\"button\"\n            name={ editExpenseBool ? 'edit' : 'add' }\n            onClick={ this.handleClick }\n          >\n            { editExpenseBool ? 'Editar despesa' : 'Adicionar despesa' }\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nFormExpense.propTypes = ({\n  currencies: PropTypes.arrayOf(PropTypes.string),\n  savingExpense: PropTypes.func.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object),\n  method: PropTypes.string,\n  tag: PropTypes.string,\n  currency: PropTypes.string,\n}.isRequired);\n\nconst mapStateToProps = (store) => ({\n  currencies: store.wallet.currencies,\n  expenses: store.wallet.expenses,\n  editExpenseBool: store.wallet.editExpense,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  savingExpense: (state) => dispatch(objectCurrencies(state)),\n  btnEditExpense: (state) => dispatch(editExpense(state)),\n  savingExpensesEdit: (state) => dispatch(attExpenses(state)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormExpense);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { removeExpense, editExpense } from '../actions';\nimport '../css/table.css';\n\nclass Table extends Component {\n  removeExpense = ({ target }) => {\n    const { expenses, removedExpense } = this.props;\n    const { name } = target;\n\n    const listExpensesAtt = expenses.filter((e) => e.id !== +(name));\n    const expenseSelected = expenses.filter((e) => e.id === +(name));\n\n    removedExpense(expenseSelected, listExpensesAtt);\n  }\n\n  attExpense = (expense) => {\n    const { btnEditExpense, getExpense } = this.props;\n\n    getExpense(expense);\n    btnEditExpense(true);\n  }\n\n  transform({ currency, exchangeRates }) {\n    const askValue = +(exchangeRates[currency].ask);\n    return askValue;\n  }\n\n  render() {\n    const { expenses } = this.props;\n\n    return (\n      <div className=\"table-div\">\n        <table>\n          <caption>\n            <h2> Tabela de Gastos </h2>\n          </caption>\n          <tbody>\n            <tr>\n              <th>Descrição</th>\n              <th>Tag</th>\n              <th>Método de pagamento</th>\n              <th>Valor</th>\n              <th>Moeda</th>\n              <th>Câmbio utilizado</th>\n              <th>Valor convertido</th>\n              <th>Moeda de conversão</th>\n              <th>Editar/Excluir</th>\n            </tr>\n            {\n              expenses\n                .map((expense) => (\n                  <tr key={ expense.id }>\n                    <td>{ expense.description }</td>\n                    <td>{ expense.tag }</td>\n                    <td>{ expense.method }</td>\n                    <td>{`${expense.value}.00`}</td>\n                    <td>{ expense.exchangeRates[expense.currency].name.split('/')[0]}</td>\n                    <td>{ (this.transform(expense)).toFixed(2) }</td>\n                    <td>{ (expense.value * this.transform(expense)).toFixed(2) }</td>\n                    <td>Real</td>\n                    <td>\n                      <button\n                        type=\"button\"\n                        name={ expense.id }\n                        data-testid=\"edit-btn\"\n                        onClick={ () => this.attExpense(expense) }\n                      >\n                        Editar\n                      </button>\n                      <button\n                        type=\"reset\"\n                        name={ expense.id }\n                        data-testid=\"delete-btn\"\n                        onClick={ this.removeExpense }\n                      >\n                        Excluir\n                      </button>\n                    </td>\n                  </tr>\n                ))\n            }\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object),\n  removedExpense: PropTypes.func,\n}.isRequired;\n\nconst mapStateToProps = (store) => ({\n  expenses: store.wallet.expenses,\n  expensesAtt: store.wallet.listExpensesAtt,\n  editExpenseBool: store.wallet.editExpense,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  removedExpense: (state, list) => dispatch(removeExpense(state, list)),\n  btnEditExpense: (state) => dispatch(editExpense(state)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n\n/**\n * REF:\n * https://developer.mozilla.org/pt-BR/docs/Web/HTML/Element/table\n */\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport FormExpense from '../components/FormExpense';\nimport { requestCurrencies } from '../actions';\nimport Table from '../components/Table';\n\nclass Wallet extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      expenseSelected: [],\n    };\n  }\n\n  componentDidMount() {\n    const { initialRequest } = this.props;\n    initialRequest();\n  }\n\n  getExpenseSelected = (expense) => {\n    this.setState({\n      expenseSelected: expense,\n    });\n  }\n\n  render() {\n    const { expenseSelected } = this.state;\n    return (\n      <div>\n        <div>\n          <Header />\n        </div>\n        <div>\n          <FormExpense state={ expenseSelected } />\n        </div>\n        <div>\n          <Table getExpense={ this.getExpenseSelected } />\n        </div>\n      </div>\n    );\n  }\n}\n\nWallet.propTypes = ({\n  initialRequest: PropTypes.func,\n}).isRequired;\n\nconst mapDispatchToProps = (dispatch) => ({\n  initialRequest: () => dispatch(requestCurrencies()),\n});\n\nexport default connect(null, mapDispatchToProps)(Wallet);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <div>\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route exact path=\"/carteira\" component={ Wallet } />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport App from './App';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}